//Linked List Node
class ListNode
{
  int data;
  ListNode next;
  
  //constructor
  public ListNode( int data )
  {
    this.data = data;
    next = null;
  }
  
  public void setData( int data )
  {
    this.data = data;
  }
  
  public int getData()
  {
    return data;
  }
  
  public void setNext( ListNode next )
  {
    this.next = next;
  }
  
  public ListNode getNext()
  {
    return next;
  }
}

//Add two LLs without modifying the LL -recursive solution
public class AddLL
{
  public static void main( String[] args )
  {
    //LL1
    ListNode head1 = new ListNode(5);
    head1.setNext(new ListNode(0));
    head1.getNext().setNext(new ListNode(7));
    head1.getNext().getNext().setNext(new ListNode(2));
    head1.getNext().getNext().getNext().setNext(new ListNode(9));
    //head1.getNext().getNext().getNext().getNext().setNext(new ListNode(28));
    //head1.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(29));
    //head1.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(75));
    
    //LL2
    ListNode head2 = new ListNode(5);
    head2.setNext(new ListNode(8));
    head2.getNext().setNext(new ListNode(1));
    head2.getNext().getNext().setNext(new ListNode(8));
    head2.getNext().getNext().getNext().setNext(new ListNode(6));
    //head2.getNext().getNext().getNext().getNext().setNext(new ListNode(20));
    //head2.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(21));
    //head2.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(78));
    
    
    
    ListNode r = addLL(head1,head2);
    while( r != null )
    {
      System.out.print(r.getData()+" ");
      r = r.getNext();
    }
    
  }
  
  public static ListNode addLL( ListNode head1, ListNode head2 )
  {
    if( head1 == null ) return head2;
    if( head2 == null ) return head1;
    int len1 = 0;
    int len2 = 0;
    ListNode cur = head1;
    while( cur != null )
    {
      len1++;
      cur = cur.getNext();
    }
    cur = head2;
    while( cur != null )
    {
      len2++;
      cur = cur.getNext();
    }
    if( len1 == len2 )
    {
      ListNode n = addEqualLL(head1,head2);
      cur = n;
      while( cur != null )
      {
      	cur = cur.getNext();
      }
      if( n.getData() > 9 )
      {
      	n.setData( n.getData() - 10 );
        ListNode a = new ListNode(1);
        a.setNext(n);
        n = a;
      }
      cur = n;
      return n;
    }
    else if( len1 < len2 )
    {
      cur = head2;
      int diff = len2 - len1;
      while( --diff != 0 )
        cur = cur.getNext();

      ListNode n = addEqualLL(head1,cur.getNext());
      if( n.getData() > 9 )
      {
      	n.setData( n.getData() - 10 );
        return addOne( head2, cur, n, 1 );
      }
       return addOne( head2, cur, n, 0 );
    }
    
    else if( len1 > len2)
    {
      cur = head1;
      int diff = len1 - len2;
      while( --diff != 0 )
        cur = cur.getNext();
      
      ListNode n = addEqualLL(cur,head2);
      if( n.getData() > 9 )
      {
      	n.setData( n.getData() - 10 );
        return addOne( head1, cur, n, 1 );
      }
      return addOne( head1, cur, n, 0 );
    }
    return null;
  }
  
  public static ListNode addEqualLL( ListNode head1, ListNode head2 )
  {
    if( head1 == null && head2 == null ) 
      return null;
    ListNode prev;
    prev = addEqualLL( head1.getNext(), head2.getNext());
    int rem = 0;
    if( prev != null &&  prev.getData() > 9 )
    {
      prev.setData( prev.getData() - 10 );
      rem = 1; 
    }
    ListNode newNode = new ListNode(Integer.MIN_VALUE);
    newNode.setData( head1.getData() + head2.getData() + rem );
    newNode.setNext(prev);
    return newNode; 
  }
  
  public static ListNode addOne( ListNode head, ListNode end, ListNode join, int rem  )
  {
    if( head == end )
    {
      ListNode newNode = new ListNode( Integer.MIN_VALUE );
      newNode.setData( head.getData()+rem );
      newNode.setNext(join);
      return newNode;
    }
    ListNode prev = addOne(head.getNext(),end,join,rem);
    
    if( prev != null &&  prev.getData() > 9 )
    {
      prev.setData( prev.getData() - 10 );
      rem = 1; 
    }
    else rem = 0;
    ListNode node = new ListNode(Integer.MIN_VALUE);
    node.setData( head.getData() + rem );
    node.setNext(prev);
    return node;  
  }  
}
