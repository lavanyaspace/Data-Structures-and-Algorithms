//Largest square subMatrix of 1's
public class BooleanSubMatrix
{
  public static void main( String[] args )
  {
    int[][] matrix = {{0,1,1,0,1},{1,1,0,1,0},{0,1,1,1,0},{1,1,1,1,0},{1,1,1,1,1},{0,0,0,0,0}};
    getSubMatrix(matrix);
  }
  
  public static void getSubMatrix( int[][] matrix )
  {
    int[][] sum = new int[matrix.length][matrix[0].length];
    for( int i = 0; i < matrix[0].length; i++ )
      sum[0][i] = matrix[0][i];
    for( int i = 0; i < matrix.length; i++ )
      sum[i][0] = matrix[i][0];
    
    for( int i = 1; i < matrix.length; i++ )
    {
      for(  int j = 1; j < matrix[0].length; j++ )
        if( matrix[i][j] == 1 )
        	sum[i][j] = Math.min((Math.min(sum[i-1][j],sum[i][j-1])),sum[i-1][j-1])+1;
        else
        	sum[i][j] = 0;
    }
    
    int max = 0;
    int row = 0;
    int col = 0;
    
    for( int i = 1; i < matrix.length; i++ )
    {
      for(  int j = 1; j < matrix[0].length; j++ )
        if( sum[i][j] > max )
      	{
           max = sum[i][j];
           row = i;
           col = j;
      	} 
    }
    
    for( int i = row - (max-1); i <=row; i++ )
    {
      for(  int j = col - (max-1); j <=col ; j++ )
         System.out.print(matrix[i][j]+" ");
      System.out.println();
   }
  }
 }

 
