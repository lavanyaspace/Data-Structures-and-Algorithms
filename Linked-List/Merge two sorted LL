/*
  Merge two linked lists 
  head pointer input could be NULL as well for empty list
  Node is defined as 
  class Node {
     int data;
     Node next;
  }
*/
public int getData()
    {
    return this.data;
}

public Node getNext()
    {
    return this.next;
}

public void setNext(Node nextNode)
    {
    this.next = nextNode;
}

Node MergeLists(Node headA, Node headB) {
     // This is a "method-only" submission. 
     // You only need to complete this method 
    if(headA == null && headB == null)
        return null;
    if(headA == null)
        return headB;
    if(headB == null)
        return headA;
   Node current = null ;
   Node tempHead = null;

    if( headA.getData() <= headB.getData())
        {
           current = headA;
           tempHead = headB;
           headB = null;
    }
    else 
        {
            current = headB; 
            tempHead = headA;
            headA = null;
    }
    Node prev = null;
    Node tempNode = tempHead;
    while ( tempHead != null && current!= null )
        {
        if(current.getData() > tempNode.getData())
            {
            prev.setNext(tempNode);
            tempHead = tempNode.getNext();
            tempNode.setNext(current);
            tempNode = tempHead;
        }
        else if(current.getData() <= tempNode.getData() )
            {
                     prev = current;
                     current = current.getNext();
            
                     if(current == null)
                         {
                         prev.setNext(tempNode);
                     }
        }
    }
    
    if(headA == null)
        return headB;
    else return headA;
}
