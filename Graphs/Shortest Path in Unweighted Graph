//Shortest Path in Unweighted Graph
//Shortest Path from source to all other nodes
import java.util.LinkedList;
import java.util.Queue;

class Graph
{
  int vertexCount;
  LinkedList[] adjL;
  
  public Graph( int count )
  {
    vertexCount = count;
    adjL = new LinkedList[count];
    for( int i =0; i< count; i++ )
      adjL[i] = new LinkedList();
  }
  
  public void addEdge( int u, int v )
  {
    adjL[u].add(v);
  }
}

public class ShortestPath
{
  public static void main( String[] args )
  {
    Graph g = new Graph(7);
    g.addEdge(0,1);
    g.addEdge(0,3);
    g.addEdge(1,3);
    g.addEdge(1,4);
    g.addEdge(2,0);
    g.addEdge(2,5);
    g.addEdge(3,6);
    g.addEdge(3,5);
    g.addEdge(4,6);
    g.addEdge(6,5);
    int[] sp = getShortestPath(g,2);
    for( int i = 0; i < sp.length; i++ )
      System.out.print(sp[i]+" ");
  }
  
  public static int[] getShortestPath( Graph g, int start )
  {
    int[] sp = new int[g.vertexCount];
    Queue<Integer> q = new LinkedList<Integer>();
    boolean[] visited = new boolean[g.vertexCount];
    sp[start] = 0;
    q.offer(start);
    visited[start] = true;
    while( !q.isEmpty() )
    {
      int v = getAdj(q.peek(),g,visited);
      while( v != -1 )
      {
        System.out.println(v+"  "+q.peek());
        sp[v] = sp[q.peek()] + 1;
        q.offer(v);
        visited[v] = true;
        v = getAdj(q.peek(),g,visited);
      }
      q.poll();
      System.out.println(q.toString());
    }
    return sp;
  }
  
   public static int getAdj( int u, Graph g, boolean[] visited )
   {
     for( int i = 0; i< g.adjL[u].size(); i++ )
        if( !visited[(int)g.adjL[u].get(i)] )
            return (int)g.adjL[u].get(i);
     return -1;
   }
}
