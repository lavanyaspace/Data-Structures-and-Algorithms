//Detecting cycles in a graph with colours
import java.util.*;
class Graph
{
  int vertexCount;
  LinkedList<Integer>[] adjL ;
  
  public Graph( int vertexCount )
  {
    this.vertexCount = vertexCount;
    adjL = new LinkedList[vertexCount];
    for( int i = 0; i<vertexCount; i++)
        adjL[i] = new LinkedList();
  }
  
  public void addEdge( int u, int v)
  {
    adjL[u].add(v);
  }
}

public class IterativeBFS
{
  public static void main( String[] args )
  {
    Graph g = new Graph(5);
    g.addEdge(0,3);
    g.addEdge(3,4);
    g.addEdge(0,2);
    g.addEdge(2,1);
    //g.addEdge(1,0);
    //g.addEdge(4,0);
    System.out.println(detectCycles(g));
  }
  
  public enum colour{ BLACK,WHITE,GREY }
  
  public static boolean detectCycles( Graph g )
  {
    colour[] c = new colour[g.vertexCount];
    
    for( int i =0; i<g.vertexCount; i++ )
      c[i] = colour.WHITE;
    
    for( int i = 0; i<g.vertexCount; i++ )
    {
      if( c[i] == colour.WHITE )
      	if(DFS(i,g,c))
        	return true;
    } 
    return false;
  }

  public static boolean DFS( int u, Graph g, colour[] c)
  {
    c[u] = colour.GREY;
    
    Iterator<Integer> i = g.adjL[u].iterator();
    while( i.hasNext() )
    {
      int v = i.next();
      if( c[v] == colour.WHITE && DFS(v,g,c) )
        return true;
      else if( c[v] == colour.GREY )
        return true;
    }
    c[u] = colour.BLACK;
    return false;
  } 
}
