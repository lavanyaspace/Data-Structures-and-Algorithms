//Linked List Node
class ListNode
{
  int data;
  ListNode next;
  
  //constructor
  public ListNode( int data )
  {
    this.data = data;
    next = null;
  }
  
  public void setData( int data )
  {
    this.data = data;
  }
  
  public int getData()
  {
    return data;
  }
  
  public void setNext( ListNode next )
  {
    this.next = next;
  }
  
  public ListNode getNext()
  {
    return next;
  }
}

//Sort LLs of 0's 1's 2's
public class SortLL
{
  public static void main( String[] args )
  {
    //LL1
    ListNode head = new ListNode(0);
    head.setNext(new ListNode(1));
    head.getNext().setNext(new ListNode(0));
    head.getNext().getNext().setNext(new ListNode(2));
    head.getNext().getNext().getNext().setNext(new ListNode(1));
    head.getNext().getNext().getNext().getNext().setNext(new ListNode(2));
    head.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(2));
    head.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(1));
    sortLL(head);
    while( head != null )
    {
      System.out.println(head.getData());
      head = head.getNext();
    }
  }
   public static void sortLL( ListNode head )
   {
     ListNode zTail = null;
     ListNode cur = head;
     if( cur.getData() == 0 )
     {
       zTail = head;
     }
     
     while( cur.getNext() != null )
     {
       if( cur.getNext().getData() == 1 && cur.getData() == 2 )
       {
         if( zTail != null )
         {
           ListNode temp = cur.getNext();
           cur.setNext(temp.getNext());
           temp.setNext(zTail.getNext());
           zTail.setNext(temp);
         }
         else
         {
           int temp = cur.getData();
           cur.setData(cur.getNext().getData());
           cur.getNext().setData(temp);
         }
       }
       else if( cur.getNext().getData() == 0 )
       {
         zTail = cur.getNext();
         ListNode temp = cur.getNext();
         cur.setNext(temp.getNext());
         temp.setNext(head);
         head = temp;
       }
     }
   }
  

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Linked List Node
class ListNode
{
  int data;
  ListNode next;
  
  //constructor
  public ListNode( int data )
  {
    this.data = data;
    next = null;
  }
  
  public void setData( int data )
  {
    this.data = data;
  }
  
  public int getData()
  {
    return data;
  }
  
  public void setNext( ListNode next )
  {
    this.next = next;
  }
  
  public ListNode getNext()
  {
    return next;
  }
}

//Sort LLs of 0's 1's 2's
public class SortLL
{
  public static void main( String[] args )
  {
    //LL1
    ListNode head = new ListNode(0);
    head.setNext(new ListNode(2));
    head.getNext().setNext(new ListNode(0));
    head.getNext().getNext().setNext(new ListNode(1));
    head.getNext().getNext().getNext().setNext(new ListNode(1));
    head.getNext().getNext().getNext().getNext().setNext(new ListNode(2));
    head.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(2));
    head.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(1));
    sortLL(head);
    while( head != null )
    {
      System.out.print(head.getData()+"  ");
      head = head.getNext();
    }
  }
   public static void sortLL( ListNode head )
   {
     if( head == null ) return ;
     ListNode zTail = null;
     ListNode cur = head;
     if( cur.getData() == 0 )
     {
       zTail = head;
     }
     
     while( cur != null && cur.getNext() != null )
     {
       if( cur.getNext().getData() == 1 && cur.getData() == 2 )
       {
         if( zTail != null )
         {
           ListNode temp = cur.getNext();
           cur.setNext(temp.getNext());
           temp.setNext(zTail.getNext());
           zTail.setNext(temp);
         }
         else
         {
           int temp = cur.getData();
           cur.setData(cur.getNext().getData());
           cur.getNext().setData(temp);
         }
       }
       else if( cur.getNext().getData() == 0 && cur.getData() != 0 )
       {
         //zTail = cur.getNext();
         if( zTail == null ) zTail = cur.getNext();
         ListNode temp = cur.getNext();
         cur.setNext(temp.getNext());
         temp.setNext(head);
         head = temp;
         ListNode c= head;
          while( c != null )
         {
      		System.out.print(c.getData()+"  ");
     		 c = c.getNext();
    	}
         System.out.println();
         zTail = zTail.getNext();
       }
       
       cur = cur.getNext();
     }
   }
}
