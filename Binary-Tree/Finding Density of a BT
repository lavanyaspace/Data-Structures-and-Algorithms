// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//Density of BT
public class BTDensity
{ 
  static int maxHeight = -1;
  static int size;
  public static void main( String[] args )
  {  
      BTN root = new BTN(0);
      root.setLeft(new BTN(1));
      root.getLeft().setLeft( new BTN(2));
      root.getLeft().setRight( new BTN(3));
      root.getLeft().getRight().setLeft( new BTN(4));
      //root.getLeft().getRight().getLeft().setRight( new BTN(9));
      //root.getLeft().getRight().getLeft().getRight().setLeft( new BTN(10));
      //root.getLeft().getRight().getLeft().getRight().getLeft().setRight( new BTN(11));
      root.getLeft().getRight().setRight( new BTN(5));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(7));
      root.getRight().getRight().setLeft(new BTN(8));
      //find size and height in one traversal of the BT using recursion
      //alternative way is to use level order traversal
      findDensity(root,0);
      //int density = size / maxHeight;
      //System.out.println(density);
      //inorder(start);
  }
  
  public static int findDensity( BTN root,int height)
  {
    int size = 0;
    if(root != null) 
    {
     height = height + 1;
     size = 1 + findDensity( root.getLeft(),  height ) + findDensity( root.getRight(), height );  
     if(height > maxHeight ) 
       maxHeight = height;
     //System.out.println(height+"   "+maxHeight+"   "+size);
     int density = size / maxHeight;
     System.out.println(density);
     return size;
    }
    return size;
  }
}
  
