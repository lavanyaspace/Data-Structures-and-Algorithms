// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//Generate Ancestor matrix of the given binary tree
public class AncestorMatrixBT
{
    static int[][] ancestor;
    
    
    public static void main( String[] args )
    {        
        ArrayList<Integer> a = new ArrayList<Integer>();
        BTN root = new BTN(0);
        root.setLeft(new BTN(1));
        root.getLeft().setLeft( new BTN(2));
        root.getLeft().setRight( new BTN(3));
        root.getLeft().getRight().setLeft( new BTN(4));
        root.getLeft().getRight().setRight( new BTN(5));
        root.setRight(new BTN(6));
        root.getRight().setRight( new BTN(7));
        root.getRight().getRight().setLeft(new BTN(8));
        
        int size = findBTSize(root);
        ancestor = new int[size][size];
        ancestor = constructAM( root, ancestor, a );
      
      	for( int i = 0; i< size; i++)
        {
          for( int j = 0; j < size; j++)
          {
            System.out.print(ancestor[i][j] + " ");
          }
          
          System.out.println();
        }
      
    }
    
    public static int findBTSize( BTN root )
    {
        if ( root == null ) return 0;
        return findBTSize(root.getLeft()) + findBTSize(root.getRight()) + 1 ;
    }
    
    public static int[][] constructAM(  BTN root, int[][] ancestor, ArrayList<Integer> path)
    {
        if(root == null) return ancestor;
        int data = root.getData();
        path.add(data);
        if( root.getLeft() == null && root.getRight() == null )
        {
          for( int i = 0; i< path.size()-1; i++)
          {
            for(int j = i + 1; j < path.size(); j++ )
            {
            	System.out.println(path.get(i)+" "+path.get(j));
            	ancestor[path.get(i)][path.get(j)] = 1;         
            }
          }
             path.remove(path.indexOf(data));
        }
        
        else{
             ancestor = constructAM( root.getLeft(), ancestor, path );
             ancestor = constructAM( root.getRight(), ancestor, path );
             path.remove(path.indexOf(data));
        }
        
       return ancestor;  
    
    }
}

