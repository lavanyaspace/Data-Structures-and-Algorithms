// Java implementation of Kosaraju's algorithm to print all SCCs
import java.io.*;
import java.util.*;
import java.util.LinkedList;

// This class represents a directed graph using adjacency list
// representation
class Graph
{
	private int V; // No. of vertices
	private LinkedList<Integer> adj[]; //Adjacency List

	//Constructor
	Graph(int v)
	{
		V = v;
		adj = new LinkedList[v];
		for (int i=0; i<v; ++i)
			adj[i] = new LinkedList();
	}

	//Function to add an edge into the graph
	void addEdge(int v, int w) { adj[v].add(w); }

	// A recursive function to print DFS starting from v
	void DFSUtil(int v,boolean visited[], int[] parent)
	{
		// Mark the current node as visited and print it
		visited[v] = true;

		int n;

		// Recur for all the vertices adjacent to this vertex
		Iterator<Integer> i =adj[v].iterator();
		while (i.hasNext())
		{
			n = i.next();
			parent[n] = v;
			if (!visited[n])
				DFSUtil(n,visited,parent);
			else if(visited[n] && n != parent[v]) 
			{
                System.out.println("Cycle Exists");
                return;
			}
		}
	}

	// The main function 
	void detectCycle()
	{
	    //parent of each vertex
	    int[] parent = new int[V];
        
        //visited array
        boolean[] visited = new boolean[V];
        
		// initialization of parent array
		for (int i = 0; i < V; i++)
			parent[i] = -1;

        for(int v =0; v < V; v++)
        {
			if (visited[v] == false)
			   DFSUtil(v, visited,parent);
        }
	}

	// Driver method
	public static void main(String args[])
	{
		// Create a graph given in the above diagram
		Graph g = new Graph(5);
		g.addEdge(1, 0);
		g.addEdge(0, 2);
		g.addEdge(2, 1);
		g.addEdge(0, 3);
		g.addEdge(3, 4);
		g.detectCycle();
	}
}
