// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//Depth of the deepest odd level leaf node.
public class OddLevelLeaf
{   
  static int leaf;
  static int maxOddDepth;
  static int oddDepthLeaf;
  public static void main( String[] args )
  {     
      BTN root = new BTN(0);
      root.setLeft(new BTN(1));
      root.getLeft().setLeft( new BTN(2));
      root.getLeft().setRight( new BTN(3));
      root.getLeft().getRight().setLeft( new BTN(4));
      //root.getLeft().getRight().getLeft().setRight( new BTN(9));
      //root.getLeft().getRight().getLeft().getRight().setLeft( new BTN(10));
      //root.getLeft().getRight().getLeft().getRight().getLeft().setRight( new BTN(11));
      root.getLeft().getRight().setRight( new BTN(5));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(7));
      root.getRight().getRight().setLeft(new BTN(8));
      
      int size = findBTSize(root);
      maxOddDepth = 0;
      depthOddLeaf(root,0);
      System.out.println("Deepest odd level leaf: "+leaf+"     "+"Depth: "+maxOddDepth+" Ans:"+ oddDepthLeaf);
  }
    
  public static int findBTSize( BTN root )
  {
    if ( root == null ) return 0;
  	  return findBTSize(root.getLeft()) + findBTSize(root.getRight()) + 1 ;
  }
  
  /*public static int depthOddLeaf( BTN root )
  {
    if( root == null ) return 0;
    int depth = Math.max( depthOddLeaf(root.getLeft()) , depthOddLeaf(root.getRight()) ) + 1 ;
    if( root.getLeft() == null && root.getRight() == null && depth % 2 != 0 )
     //System.out.println(root.getData()+"   "+depth);
    return depth;
  }*/
  
  public static int depthOddLeaf( BTN root, int depth )
  {
    if( root != null )
    {
      depth = depth + 1;
      maxOddDepth = ( depth % 2 != 0 && depth > maxOddDepth) ? depth : maxOddDepth ;
      int leftDepth,rightDepth;
      if( root.getLeft() != null )
      leftDepth = depthOddLeaf( root.getLeft() , depth);
      if( root.getRight() != null ) 
      rightDepth = depthOddLeaf( root.getRight() , depth );
      
      if( root.getLeft() == null && root.getRight() == null && depth == maxOddDepth)
      {
      	leaf = root.getData();
        oddDepthLeaf = depth;
      }
        //System.out.println(root.getData()+"   "+depth);
    }
    return depth;
  }
  
  
}
