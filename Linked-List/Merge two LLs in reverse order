//Linked List Node
class ListNode
{
  int data;
  ListNode next;
  
  //constructor
  public ListNode( int data )
  {
    this.data = data;
    next = null;
  }
  
  public void setData( int data )
  {
    this.data = data;
  }
  
  public int getData()
  {
    return data;
  }
  
  public void setNext( ListNode next )
  {
    this.next = next;
  }
  
  public ListNode getNext()
  {
    return next;
  }
}

//Merge two LLs in reverse order
public class EvenOddLL
{
  public static void main( String[] args )
  {
    //LL1
    ListNode head1 = new ListNode(5);
    head1.setNext(new ListNode(10));
    head1.getNext().setNext(new ListNode(17));
    head1.getNext().getNext().setNext(new ListNode(21));
    head1.getNext().getNext().getNext().setNext(new ListNode(23));
    head1.getNext().getNext().getNext().getNext().setNext(new ListNode(28));
    head1.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(29));
    head1.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(75));
    //LL2
    ListNode head2 = new ListNode(4);
    head2.setNext(new ListNode(8));
    head2.getNext().setNext(new ListNode(12));
    head2.getNext().getNext().setNext(new ListNode(14));
    head2.getNext().getNext().getNext().setNext(new ListNode(16));
    head2.getNext().getNext().getNext().getNext().setNext(new ListNode(20));
    head2.getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(21));
    //head2.getNext().getNext().getNext().getNext().getNext().getNext().setNext(new ListNode(78));
    
    ListNode r = mergeLLReverse(head1,head2);
    while( r != null )
    {
      System.out.print(r.getData()+" ");
      r = r.getNext();
    }
    
  }
  
  public static ListNode mergeLLReverse( ListNode head1, ListNode head2 )
  {
    if( head1 == null && head2 == null )
      return null;
    ListNode cur ;
    ListNode next ;
    ListNode head = null;
    if( head1.getData() < head2.getData() )
    {
      cur = head1;
      head1 = head1.getNext();
    }
    else
    {
      cur = head2;
      head2 = head2.getNext();
    }
    
    cur.setNext(null);
    
    
    while( head1 != null && head2 != null && cur != null )
    {
      if( head1.getData() > head2.getData() )
      {
          next = head2;
          head2 = next.getNext();
        }
        else
        {
           next = head1;
           head1 = next.getNext();
        }
          next.setNext(cur);
          cur = next;
      }
    
    if( head1 == null && head2 != null )
    {
        head = reverseLL(head2);
        head2.setNext(cur);;
    }
    else if(head1 != null && head2 == null)
    {
      	head = reverseLL(head1);
    	head1.setNext(cur);
    }
      
      return head; 
    }
  
  public static ListNode reverseLL( ListNode head )
  {
    ListNode prev = null;
    ListNode cur = head;
    ListNode next = cur.getNext();
    
    while( next != null )
    {
      cur.setNext(prev);
      prev = cur;
      cur = next;
      next = cur.getNext();
    }
    cur.setNext(prev);
    return cur;
  }
  
 
  }
  
  
  
  
  
  
  
  
