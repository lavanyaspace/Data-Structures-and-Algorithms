//Snake and Ladder
import java.util.*;
public class SnakeAndLadder
{
  public static void main( String[] args )
  {
    int board = 30;
    int[] adj = new int[board];
     // Ladders
    adj[2] = 21;
    adj[4] = 7;
    adj[10] = 25;
    adj[19] = 28;
 
    // Snakes
    adj[26] = 0;
    adj[20] = 8;
    adj[16] = 3;
    adj[18] = 6;
    
    System.out.println(getMinThrows(board,adj,29));
  }
  
  public static int getMinThrows( int board, int[] adj, int dest )
  {
    Queue<Integer> q = new LinkedList<Integer>();
    boolean[] visited = new boolean[board];
    int dieThrows = 0;
    q.offer(0);
    visited[0] = true;
    q.offer(Integer.MIN_VALUE);
    while( !q.isEmpty() )
    {
      int e = q.poll();
      if( e == dest )return dieThrows-1;
      if( e != Integer.MIN_VALUE )
      {
      	int v = getAdj(e,board,visited,adj);
      	while( v != -1 )
      	{
          q.offer(v);
          visited[v] =true;
          v = getAdj(e,board,visited,adj);
      	}
      }
      else
      {
        if(!q.isEmpty())
        {
          dieThrows++;
          q.offer(Integer.MIN_VALUE);
        }
      }   
  }
    return dieThrows-1;
}
  
  public static int getAdj( int e, int limit, boolean[] visited, int[] adj )
  {
    for( int i = 1; i < 7; i++ )
    {
      if( e+i < limit && !visited[e+i])
        return e+i;
    }
    if( adj[e] != 0 && !visited[adj[e]] )
      return adj[e];
    return -1;
  }
}
