// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//is BT BST
public class CheckBST
{   
  static BTN prev = new BTN(Integer.MIN_VALUE);
  static BTN swappedOne = null;
  static BTN swappedTwo  = null;
  public static void main( String[] args )
  {     
      /*BTN root = new BTN(0);
      root.setLeft(new BTN(1));
      root.getLeft().setLeft( new BTN(2));
      root.getLeft().setRight( new BTN(3));
      root.getLeft().getRight().setLeft( new BTN(4));
      //root.getLeft().getRight().getLeft().setRight( new BTN(9));
      //root.getLeft().getRight().getLeft().getRight().setLeft( new BTN(10));
      //root.getLeft().getRight().getLeft().getRight().getLeft().setRight( new BTN(11));
      root.getLeft().getRight().setRight( new BTN(5));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(7));
      root.getRight().getRight().setLeft(new BTN(8));*/
    
      BTN root = new BTN(5);
      root.setLeft(new BTN(3));
      root.getLeft().setLeft(new BTN(1));
      root.getLeft().getLeft().setLeft(new BTN(0));
      root.getLeft().getLeft().setRight(new BTN(2));
      root.getLeft().setRight( new BTN(8));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(4));
      root.getRight().getRight().setLeft(new BTN(7));
      //root.getRight().setLeft( new BTN(8));
      //root.getRight().setRight(new BTN(7));
      int size = findBTSize(root);
      checkSwap(root);
  }
   
  public static int findBTSize( BTN root )
  {
    if ( root == null ) return 0;
  	  return findBTSize(root.getLeft()) + findBTSize(root.getRight()) + 1 ;
  }
  
  public static void checkSwap( BTN root )
  {
    
    isBST(root);
    
    System.out.println(swappedOne.getData());
    
    if(swappedOne != null && swappedTwo != null)
    {
      int temp = swappedOne.getData();
      swappedOne.setData(swappedTwo.getData());
      swappedTwo.setData(temp);
    }
  }
  
  
  public static BTN isBST( BTN root )
  {
    if( root == null ) return null;
    BTN left = isBST(root.getLeft());
      if( left != null)
        return left;
    if( root.getData() < prev.getData() )
    {
         if(swappedOne == null)
         {
         	swappedOne = prev;
            System.out.println(swappedOne.getData());
         }
         
         swappedTwo = root;
         System.out.println(swappedTwo.getData());
     }
    prev.setData(Integer.MIN_VALUE);
    prev = root;
    return (isBST(root.getRight()));
  }
}
