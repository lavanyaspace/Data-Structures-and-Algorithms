//Check Bipartiteness
import java.util.*;
class Graph
{
  int vertexCount;
  LinkedList<Integer>[] adjL ;
  @SuppressWarnings("unchecked")
  public Graph( int vertexCount )
  {
    this.vertexCount = vertexCount;
    adjL = new LinkedList[vertexCount];
    for( int i = 0; i<vertexCount; i++)
        adjL[i] = new LinkedList();
  }
  
  public void addEdge( int u, int v)
  {
    adjL[u].add(v);
  }
}

public class BipartiteGraph
{
  public static void main( String[] args )
  {
    Graph g = new Graph(5);
    g.addEdge(0,3);
    g.addEdge(3,4);
    g.addEdge(0,2);
    g.addEdge(2,1);
    //g.addEdge(1,0);
    g.addEdge(1,3);
    //g.addEdge(4,0);
    //g.addEdge(4,2);
    System.out.println(checkBipartiteness(g));
  }
  
  public static boolean checkBipartiteness( Graph g )
  {
    Queue<Integer> q = new LinkedList<Integer>();
    boolean[] visited = new boolean[g.vertexCount];
    boolean[] bipartite = new boolean[g.vertexCount];
    q.offer(0);
    visited[0] = true;
    bipartite[0] = true;
    while( !q.isEmpty() )
    {
      int u = q.poll();
      Iterator<Integer> i = g.adjL[u].iterator(); 
      while( i.hasNext() )
      {
        int v = i.next();
        if( !visited[v] )
        {
          bipartite[v] = !bipartite[u];
          visited[v] = true;
          q.offer(v);
        }
        
        else
        {
          if( bipartite[v] == bipartite[u])
            return false;
        }
      }
    }
    return true;
  }
}
