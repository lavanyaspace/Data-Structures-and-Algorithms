//Finding Mother Vertex
import java.util.*;

class Graph
{
  int vertexCount;
  LinkedList<Integer>[] adjL ;
  
  public Graph( int vertexCount )
  {
    this.vertexCount = vertexCount;
    adjL = new LinkedList[vertexCount];
    for( int i = 0; i<vertexCount; i++)
        adjL[i] = new LinkedList();
  }
  
  public void addEdge( int u, int v)
  {
    adjL[u].add(v);
  }
}


public class MotherVertex
{
  public static void main( String[] args )
  {
    Graph g = new Graph(7);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(4,1);
    g.addEdge(1,3);
    g.addEdge(6,0);
    g.addEdge(6,4);
    g.addEdge(5,6);
    g.addEdge(5,2);
    System.out.println(findMother(g));
  }
  
  public static int findMother( Graph g )
  {
    boolean[] visited = new boolean[g.vertexCount];
    int mother = -1;
    for( int i = 0 ; i < g.vertexCount; i++ )
    {
      if( visited[i] == false )
      {
        DFS(i,visited,g);
        mother = i;
      }
    }
    
    for( int i = 0; i < g.vertexCount; i++ )
      visited[i] = false;
    
    DFS(mother,visited,g);
    
    for( int i = 0; i < g.vertexCount; i++ )
      if( visited[i] == false )
      	return -1;
    return mother;
  }
  
   public static void DFS( int vertex, boolean[] visited, Graph g )
   {
     visited[vertex] = true;
     Iterator<Integer> i = g.adjL[vertex].iterator();
     while(i.hasNext())
     {
       int u = i.next();
       if( !visited[u] )
         DFS(u,visited,g);
     }
     
   }
}
