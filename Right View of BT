// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//Print right view of BT
public class RightViewBT
{   
  public static void main( String[] args )
  {     
      BTN root = new BTN(0);
      root.setLeft(new BTN(1));
      root.getLeft().setLeft( new BTN(2));
      root.getLeft().setRight( new BTN(3));
      root.getLeft().getRight().setLeft( new BTN(4));
      root.getLeft().getRight().getLeft().setRight( new BTN(9));
      root.getLeft().getRight().setRight( new BTN(5));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(7));
      root.getRight().getRight().setLeft(new BTN(8));
      
      int size = findBTSize(root);
     
      printRightView( root );
  }
    
  public static int findBTSize( BTN root )
  {
    if ( root == null ) return 0;
  	  return findBTSize(root.getLeft()) + findBTSize(root.getRight()) + 1 ;
  }
  
  public static void printRightView( BTN root )
  {
    if(root == null) return;
  	Queue<BTN> q = new LinkedList<BTN>();
    q.offer(root);
    q.offer(null);
    
    while(!q.isEmpty())
    {
      BTN tmp = q.poll();
      if(tmp != null)
      {
        if(q.peek() == null)
          System.out.print(tmp.getData()+ " ");
        if(tmp.getLeft() != null)
          q.offer(tmp.getLeft());
        if(tmp.getRight() != null)
          q.offer(tmp.getRight());
      }
      else{
        if(!q.isEmpty()){
          q.offer(null);
         }   
  	   }
 	}  
  }
}
