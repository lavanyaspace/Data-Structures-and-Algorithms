//Does path of length more than k exist
import java.util.*;
class WeightedGraphNode
{
  int v;
  int weight;
  public WeightedGraphNode( int v, int w )
  {
    this.v = v;
    weight = w;
  }
}
class Graph
{
  int V;
  LinkedList<WeightedGraphNode>[] adjL;
  @SuppressWarnings("unchecked")
  public Graph( int v )
  {
    V = v;
    adjL = new LinkedList[v];
    for( int i = 0; i < v; i++ )
      adjL[i] = new LinkedList();
  }
  
  public void addEdge( WeightedGraphNode u, WeightedGraphNode v )
  {
    adjL[u.v].add(v);
    adjL[v.v].add(u);
  }
}

public class ShortestPathDAG
{
  public static void main( String[] args )
  {
    Graph g = new Graph(6);
    WeightedGraphNode n1 = new WeightedGraphNode(1,5);
    WeightedGraphNode n11 = new WeightedGraphNode(0,5);
    g.addEdge(n11,n1);
    WeightedGraphNode n2 = new WeightedGraphNode(2,3);
    WeightedGraphNode n22 = new WeightedGraphNode(0,3);
    g.addEdge(n22,n2);
    WeightedGraphNode n3 = new WeightedGraphNode(3,6);
    WeightedGraphNode n33 = new WeightedGraphNode(1,6);
    g.addEdge(n33,n3);
    WeightedGraphNode n4 = new WeightedGraphNode(2,2);
    WeightedGraphNode n44 = new WeightedGraphNode(1,2);
    g.addEdge(n44,n4);
    WeightedGraphNode n5 = new WeightedGraphNode(4,4);
    WeightedGraphNode n55 = new WeightedGraphNode(2,4);
    g.addEdge(n55,n5);
    WeightedGraphNode n6 = new WeightedGraphNode(5,2);
    WeightedGraphNode n66 = new WeightedGraphNode(2,2);
    g.addEdge(n66,n6);
    WeightedGraphNode n7 = new WeightedGraphNode(3,7);
    WeightedGraphNode n77 = new WeightedGraphNode(2,7);
    g.addEdge(n77,n7);
    WeightedGraphNode n8 = new WeightedGraphNode(4,10);
    WeightedGraphNode n88 = new WeightedGraphNode(3,10);
    g.addEdge(n88,n8);
    WeightedGraphNode n9 = new WeightedGraphNode(5,2);
    WeightedGraphNode n99 = new WeightedGraphNode(4,2);
    g.addEdge(n99,n9); 
    findPath(g,0,10);
  }
  
  public static void findPath( Graph g, int s, int k )
  {
    if( s >= g.V ) return;
    boolean[] visited = new boolean[g.V];
    System.out.println(DFSUtil(s,k,g,visited));
  }
  
  public static boolean DFSUtil( int s, int k, Graph g, boolean[] visited )
  {
         // System.out.println("here"+(s));
    visited[s] = true;
    Iterator<WeightedGraphNode> i = g.adjL[s].iterator();
    while( i.hasNext() )
    {
      WeightedGraphNode v = i.next();
      if( (k - v.weight) < 0 && !visited[v.v] )
      {
        System.out.println("here"+(k));
        return true;
      }
      else if( !visited[v.v] )
      {
        
        System.out.println("here"+(v.v)+"  "+(k-v.weight));
        return DFSUtil(v.v,k-v.weight,g,visited);
      }
    }
    return false;
  }
}
