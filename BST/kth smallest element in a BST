//kth smallest element in a BST
// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}
public class KthSmallest
{
  public static void main( String[] args )
  {
    BTN root = new BTN(20);
    root.setLeft(new BTN(10));
    root.getLeft().setLeft( new BTN(5));
    root.getLeft().setRight( new BTN(15));
    root.getLeft().getRight().setLeft( new BTN(12));
    root.getLeft().getRight().setRight( new BTN(18));
    root.setRight(new BTN(30));
    root.getRight().setRight( new BTN(40));
    root.getRight().getRight().setLeft(new BTN(35));
    findK(root,6);
  }
  
  public static int findK( BTN root, int k )
  {
    if( root!= null && k != 0 )
    {
      k = findK(root.getLeft(),k );
      if( --k == 0 )
      {
        System.out.println(root.getData());
        return k;
      }
      k = findK( root.getRight(), k );
    }
    return k;
  }
}
