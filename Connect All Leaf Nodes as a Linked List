// Binary Tree Node
import java.util.*;
public class BTN
{
    int data;
    BTN left;
    BTN right;
    
    public BTN( int data ){
        this.data = data;
        right = left = null;
    }
    
    public void setData( int data ){
        this.data = data;
    }
    
    public int getData(){
        return data;
    }
    
    public void setLeft( BTN left ){
        this.left = left;
    }
    
    public BTN getLeft(){
        return left;
    }
    
    public void setRight( BTN right ){
        this.right = right;
    }
    
    public BTN getRight(){
        return right;
    }
}

//Connect All Leaf Nodes as a Linked List
public class BTLeafLL
{ 
  public static void main( String[] args )
  {  
      BTN root = new BTN(0);
      root.setLeft(new BTN(1));
      root.getLeft().setLeft( new BTN(2));
      root.getLeft().setRight( new BTN(3));
      root.getLeft().getRight().setLeft( new BTN(4));
      root.getLeft().getRight().getLeft().setRight( new BTN(9));
      //root.getLeft().getRight().getLeft().getRight().setLeft( new BTN(10));
      //root.getLeft().getRight().getLeft().getRight().getLeft().setRight( new BTN(11));
      root.getLeft().getRight().setRight( new BTN(5));
      root.setRight(new BTN(6));
      root.getRight().setRight( new BTN(7));
      root.getRight().getRight().setLeft(new BTN(8));
      BTN start = connectLeaves(root);
      while( start != null)
      {
        System.out.println(start.getData());
        start = start.getRight();
      }
  }
  
  public static BTN connectLeaves( BTN root )
  {
    if( root == null ) return null;
    BTN right = connectLeaves(root.getRight());
    BTN left = connectLeaves(root.getLeft());
    if( left == null && right == null )
     	return root;
    else if( left != null && right != null )
    {
      BTN cur = left;
      while( cur.getRight() != null )
      {
        cur = cur.getRight();
      }
      cur.setRight(right);
      return left;
    }
    return (left != null )?left:right;
  }
}
