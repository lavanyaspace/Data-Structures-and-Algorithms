//Trie Data Structure
//Finding duplicates in boolean matrix
import java.util.*;
class TrieNode
{
  char data;
  TrieNode zero;
  TrieNode one;
  public TrieNode( char data )
  {
    this.data = data;
    zero = null;
    one = null;
  }
}
  
public class DuplicateRows
{
  public static void main( String[] args )
  {
    int[][] matrix = {{0,1,1,0,0,1},{1,1,0,0,1,1},{1,0,1,0,1,1},{0,0,1,1,1,1},{0,1,1,0,0,1}};
    findDuplicates(matrix);
  }
  
  public static void findDuplicates( int[][] matrix )
  {
    TrieNode root = new TrieNode(' ');
    for( int i = 0; i < matrix.length; i++ )
    {
      root = insertTrie( root, matrix[i] );
    }
    ArrayList<Character> temp = new ArrayList<Character>();
    DFS(root,temp);
   /* ArrayList<ArrayList<Character>> res = new ArrayList<ArrayList<Character>>();
    ArrayList<Character> temp = new ArrayList<Character>();
    postOrder(root,res,temp);
    Iterator<ArrayList<Character>> i = res.iterator();
    while( i.hasNext() )
    {
      Iterator<Character> j = i.next().iterator();
      while( j.hasNext() )
      {
        System.out.print(j.next()+" ");
      }
      System.out.println();
    }*/
  }
  
  
  public static TrieNode insertTrie( TrieNode root, int[] row )
  {
    TrieNode cur = root; 
    for( int i = 0; i< row.length; i++ )
    {
      if( row[i] == 0 )
      {
      	if( cur.zero == null )
    	{
      		TrieNode newNode = new TrieNode('0');
      		cur.zero = newNode;
            cur = newNode;
    	}
        else 
          cur = cur.zero;
      }
      else
      {
        if( cur.one == null )
    	{
      		TrieNode newNode = new TrieNode('1');
      		cur.one = newNode;
            cur = newNode;
    	}
        else
          cur = cur.one;
      }
    }
    return root;
  } 
  
  public static void DFS( TrieNode root, ArrayList<Character> temp )
  {
    if( root.data != ' ')
    	temp.add(root.data);
    if( root.zero == null && root.one == null )
    {
      System.out.println(temp.toString());
      temp.remove(temp.size()-1);
    }
    else
    {
    	if( root.zero != null )
        	DFS(root.zero, temp);
    	if( root.one != null )
        	DFS(root.one, temp);
        if(! temp.isEmpty()) 
    	   temp.remove(temp.size()-1);
    }
  }
  
  
  
  
  
  
  
  
}
