//Sorting/Merge Sort
public class MergeSort
{
  public static void main( String[] args )
  {
    int[] a = {4,7,1,9,12,34,8,90,2};
    mergeSort(a);
  }
  
  public static void mergeSort( int[] a)
  {
    int[] temp = new int[a.length];
    temp = mSort(a,temp,0,a.length-1);
    for( int i = 0 ; i< temp.length; i++ )
      System.out.print(temp[i]+" ");
  }
  
  public static int[] mSort( int[] a, int[] temp, int left, int right )
  {
    int center;
    int[] r = new int[a.length];
    if( left < right )
    {
      center = (left + right) / 2;
      mSort(a,temp,left,center);
      mSort(a,temp,center+1,right);
      r = merge(a,temp,left,center+1,right);
    }
    
      return r;
  }
  
  public static int[] merge( int[] a, int[] temp, int lPos, int rPos , int rightEnd)
  {
    int leftEnd, tempPos, numElements;
    leftEnd = rPos - 1;
    tempPos = lPos;
    numElements =  rightEnd - lPos + 1;
    
    while( lPos<=leftEnd && rPos<= rightEnd )
    {
      if( a[lPos] <= a[rPos] ) temp[tempPos++] = a[lPos++];
      else temp[tempPos++] = a[rPos++];
    }
    
    while( lPos <= leftEnd )
      temp[tempPos++] = a[lPos++];
    
    while( rPos <= rightEnd )
      temp[tempPos++] = a[rPos++];
    
    for( int i = 0; i< numElements ; i++, rightEnd--)
    {
      a[rightEnd] = temp[rightEnd];
    }
    return a;
  }
}
